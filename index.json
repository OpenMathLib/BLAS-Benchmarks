{"project": "BLAS-Benchmarks", "project_url": "https://github.com/OpenMathLib/BLAS-Benchmarks", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"22": "eb2da3b8a426764858d5097d35f2920bbbeac507", "26": "151df5c8cb627e2547770d587f09068ddf77392a", "30": "22a511c3c73529eb3a1dcfc0d5a90215d5d5caec", "34": "56e0e0d3e4954b6e50073b5252b111d2558727d5", "39": "7f6ece1bd4397040cfbc65668f7e9c92c9c2d7d3", "41": "634195365e07c8bd27f4db0245dcf8f78af177d7", "48": "8e4fe231a9627234270edaf6706efb29ea8d19d4", "51": "b492b886f190d75794e72cde03a8dfdc919a5587", "58": "788fae24e2be3ddb558453c01d27d49f0d1c9867", "62": "a86fd19c7cf67236418cbf4b03a5ae46ba384481", "66": "0c2439a110f374c4eefb54231a5219dd97c065e0", "70": "9025b2b7493007783d729c7a2f48bfe7bf189c8c", "74": "9d465aa0548dba9aeec82b487a062624e40aeae3", "83": "d90c9b1e4e5bad24a6f30c4c9a67ba6c4b671cd8", "87": "65da1d0a868fd0561d41e4d68ee909c4f70742ef", "110": "16e877461acdf66b72eeff7b66e6cb040c8bbc7d", "115": "5258bbcd15915eadeb72197b2e6fe13b3233995a", "119": "37de1780d11b42062d39e86f4ad38efddb110b09", "125": "b65e1986ed9bb4fb14b902f523346e0f6b268e43", "130": "f51ca473b0fcd19838c55fe306d58f4f67188baf", "134": "62c73cec02de3318b183362a0e8f832438de0c55", "138": "17b260f26210f757778f1d439228bcb97915fd0c", "142": "a917ca649f5937cd90f74cfa2a6eecca15ace88e", "146": "4dfdea0fcf5189a12bf74b52d3c7ba2e9b857c64", "150": "db317904f19b6f99c759abbb11e2e7824fba2ebe", "154": "2bb223cf38ec4884fe42de918c4d2ece040bc84a", "158": "7bfa0795912565f11e30be7fd09674e7e52e6b69", "162": "b1446a4f4dde0a9e4b60558f78dfc62a40799311", "166": "4f64df4c02667b7bad724cb7c50ffa98fae35598", "170": "abc3ee6ef62ee4507efb5d27cb564218b9c048b0", "174": "ef8fcc69bfa4eb71326ad056665dc0fc68786d73", "178": "125c1b75270397726e82b542149fdf15623e1952"}, "revision_to_date": {"22": 1718958164000, "26": 1718958494000, "30": 1718958866000, "34": 1718960253000, "39": 1718961592000, "41": 1718961641000, "48": 1718962666000, "51": 1718962796000, "58": 1718964028000, "62": 1718965247000, "66": 1718968561000, "70": 1718973334000, "74": 1718976092000, "83": 1718977525000, "87": 1718979435000, "110": 1718984297000, "115": 1718984952000, "119": 1718985274000, "125": 1718986978000, "130": 1718990031000, "134": 1718990336000, "138": 1718994336000, "142": 1718997326000, "146": 1719001221000, "150": 1719004734000, "154": 1719008288000, "158": 1719011861000, "162": 1719019283000, "166": 1719023479000, "170": 1719026569000, "174": 1719030093000, "178": 1719033545000}, "params": {"machine": ["gha-aws-graviton", "gha-aws-skylake", "gha-ubuntu-noble"], "python": ["3.12"], "branch": ["tracker"]}, "graph_param_list": [{"machine": "gha-aws-skylake", "python": "3.12", "branch": "tracker"}, {"machine": "gha-aws-graviton", "python": "3.12", "branch": "tracker"}, {"machine": "gha-ubuntu-noble", "python": "3.12", "branch": "tracker"}], "benchmarks": {"benchmarks.DDot.time_ddot": {"code": "class DDot:\n    def time_ddot(self, n):\n        run_ddot(self.x, self.y, self.func)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        self.x = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.func = ow.get_func('dot', 'd')", "min_run_count": 2, "name": "benchmarks.DDot.time_ddot", "number": 0, "param_names": ["size"], "params": [["100", "200", "400", "600", "800", "1000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "238a2730d26c24fe16745c65ae2194b72dee2d6ea4bbbf72a4a343cf80dd608e", "warmup_time": -1}, "benchmarks.DSyrk.time_dsyrk": {"code": "class DSyrk:\n    def time_dsyrk(self, n, variant):\n        run_dsyrk(self.a, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.c = np.empty((n, n), dtype=float, order='F')\n        self.func = ow.get_func('syrk', variant)", "min_run_count": 2, "name": "benchmarks.DSyrk.time_dsyrk", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5a0ceb326af714835d0440313888909a1edf921de8142e562bc58f8bf65fce06", "warmup_time": -1}, "benchmarks.Daxpy.time_daxpy": {"code": "class Daxpy:\n    def time_daxpy(self, n, variant):\n        run_daxpy(self.x, self.y, self.axpy)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.x = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.axpy = ow.get_func('axpy', variant)", "min_run_count": 2, "name": "benchmarks.Daxpy.time_daxpy", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6c777a64382fa8a876070ad566bfc06dc11f4d33cc0d41820c22d3ed976e3467", "warmup_time": -1}, "benchmarks.Dgemm.time_dgemm": {"code": "class Dgemm:\n    def time_dgemm(self, n, variant):\n        run_dgemm(self.a, self.b, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.b = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.c = np.empty((n, n), dtype=float, order='F')\n        self.func = ow.get_func('gemm', variant)", "min_run_count": 2, "name": "benchmarks.Dgemm.time_dgemm", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3360ecc154a6f4a6f1f6e48fe4e9b317792e70952a5cc32c44176910ab1c6cd1", "warmup_time": -1}, "benchmarks.Dgesdd.time_dgesdd": {"code": "class Dgesdd:\n    def time_dgesdd(self, mn, variant):\n        run_dgesdd(self.a, self.lwork, self.func)\n\n    def setup(self, mn, variant):\n        m, n = (int(x) for x in mn.split(\",\"))\n    \n        rndm = np.random.RandomState(1234)\n        a = np.array(rndm.uniform(size=(m, n)), dtype=float, order='F')\n    \n        gesdd_lwork = ow.get_func('gesdd_lwork', variant)\n    \n        lwork, info = gesdd_lwork(m, n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a, self.lwork = a, lwork\n        self.func = ow.get_func('gesdd', variant)", "min_run_count": 2, "name": "benchmarks.Dgesdd.time_dgesdd", "number": 0, "param_names": ["(m, n)", "variant"], "params": [["'100, 5'", "'1000, 222'"], ["'s'", "'d'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a64075dc5110b73e8a4363dde2e44b1ebbdaa76087b60b23dc0f46c48e6dfe64", "warmup_time": -1}, "benchmarks.Dgesv.time_dgesv": {"code": "class Dgesv:\n    def time_dgesv(self, n, variant):\n        run_dgesv(self.a, self.b, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.a = (np.array(rndm.uniform(size=(n, n)), dtype=float, order='F') +\n                  np.eye(n, order='F'))\n        self.b = np.array(rndm.uniform(size=(n, 1)), order='F')\n        self.func = ow.get_func('gesv', variant)", "min_run_count": 2, "name": "benchmarks.Dgesv.time_dgesv", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d68b52b68a893b0ebd7fa6246c452f2cf9171a48ff1efd947070e4d5cb9c11c5", "warmup_time": -1}, "benchmarks.Dsyev.time_dsyev": {"code": "class Dsyev:\n    def time_dsyev(self, n, variant):\n        run_dsyev(self.a, self.lwork, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        a = rndm.uniform(size=(n, n))\n        a = np.asarray(a + a.T, dtype=float, order='F')\n        a_ = a.copy()\n    \n        syev_lwork = ow.get_func('syev_lwork', variant)\n        lwork, info = syev_lwork(n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a = a_\n        self.lwork = lwork\n        self.func = ow.get_func('syev', variant)", "min_run_count": 2, "name": "benchmarks.Dsyev.time_dsyev", "number": 0, "param_names": ["size", "variant"], "params": [["50", "64", "128", "200"], ["'s'", "'d'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "8c4ffc3f68dee9e7affe73391be0affe83497b672d9fae2d436a7a0fd6136b41", "warmup_time": -1}, "benchmarks.Nrm2.time_dnrm2": {"code": "class Nrm2:\n    def time_dnrm2(self, n, variant):\n        run_dnrm2(n, self.x, 1, self.nrm2)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.x = rndm.uniform(size=(n,)).astype(float)\n        self.nrm2 = ow.get_func('nrm2', variant)", "min_run_count": 2, "name": "benchmarks.Nrm2.time_dnrm2", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'d'", "'dz'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4f65590a47f5117049951e49a2983706b5a5611a600ad8c99a8777810438430e", "warmup_time": -1}}, "machines": {"gha-aws-skylake": {"machine": "gha-aws-skylake", "version": 1}, "gha-aws-graviton": {"machine": "gha-aws-graviton", "version": 1}, "gha-ubuntu-noble": {"machine": "gha-ubuntu-noble", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}