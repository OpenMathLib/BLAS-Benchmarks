{"project": "BLAS-Benchmarks", "project_url": "https://github.com/OpenMathLib/BLAS-Benchmarks", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"22": "eb2da3b8a426764858d5097d35f2920bbbeac507", "26": "151df5c8cb627e2547770d587f09068ddf77392a", "30": "22a511c3c73529eb3a1dcfc0d5a90215d5d5caec", "34": "56e0e0d3e4954b6e50073b5252b111d2558727d5", "39": "7f6ece1bd4397040cfbc65668f7e9c92c9c2d7d3", "41": "634195365e07c8bd27f4db0245dcf8f78af177d7", "48": "8e4fe231a9627234270edaf6706efb29ea8d19d4", "51": "b492b886f190d75794e72cde03a8dfdc919a5587", "58": "788fae24e2be3ddb558453c01d27d49f0d1c9867", "62": "a86fd19c7cf67236418cbf4b03a5ae46ba384481", "66": "0c2439a110f374c4eefb54231a5219dd97c065e0", "70": "9025b2b7493007783d729c7a2f48bfe7bf189c8c", "74": "9d465aa0548dba9aeec82b487a062624e40aeae3", "83": "d90c9b1e4e5bad24a6f30c4c9a67ba6c4b671cd8", "87": "65da1d0a868fd0561d41e4d68ee909c4f70742ef", "110": "16e877461acdf66b72eeff7b66e6cb040c8bbc7d", "115": "5258bbcd15915eadeb72197b2e6fe13b3233995a", "119": "37de1780d11b42062d39e86f4ad38efddb110b09", "125": "b65e1986ed9bb4fb14b902f523346e0f6b268e43", "130": "f51ca473b0fcd19838c55fe306d58f4f67188baf", "134": "62c73cec02de3318b183362a0e8f832438de0c55", "138": "17b260f26210f757778f1d439228bcb97915fd0c", "142": "a917ca649f5937cd90f74cfa2a6eecca15ace88e", "146": "4dfdea0fcf5189a12bf74b52d3c7ba2e9b857c64", "150": "db317904f19b6f99c759abbb11e2e7824fba2ebe", "154": "2bb223cf38ec4884fe42de918c4d2ece040bc84a", "158": "7bfa0795912565f11e30be7fd09674e7e52e6b69", "162": "b1446a4f4dde0a9e4b60558f78dfc62a40799311", "166": "4f64df4c02667b7bad724cb7c50ffa98fae35598", "170": "abc3ee6ef62ee4507efb5d27cb564218b9c048b0", "174": "ef8fcc69bfa4eb71326ad056665dc0fc68786d73", "178": "125c1b75270397726e82b542149fdf15623e1952", "182": "e7c988a36f49d5e860b7bfee47ef821007535566", "186": "5008781e8a0c0f9acdb8297c50dec51bf77c744e", "191": "9b6ffcaf4c69d713f66a7a25a90dffe1646c3ebb", "195": "3e1c742b29d38d288fb4b6f153746297d656f9d2", "199": "03edd51876abb0992a2070bd9f4b7cc8cca1c814", "203": "0b5d6ba1dd0ffdafd3e29b3ffae9ff04ae4299dc", "207": "a551a668f5339a26761cd7943f1c65736df8efbb", "211": "ae66b70866b953fd6ada5ddb9f8be155908653e7", "216": "4d1175c8425e1c7484aef7fc073e2b6798fa83d7", "220": "80a37714cbbd8e3383160256f173c9a150f97e1e", "225": "139bbac9d6401137894704e27d1f40be873ced3c", "230": "1763181e91c142f7f265f9148ce3bc55a01d282d", "234": "cb4d3a7199570f56c51872c3b67c7da2c075ff11", "238": "6ee189f29dbe9d5f6b54b3226a2af2dcdf825868", "242": "65e17a6c9ff775093fbe3c07b6609044e8e6b997", "246": "7dacc7f03052cb3515aa3dae98aaba95df0a97e7", "251": "5c0e53ef0eb32cfcffce18f43302a587d38c70e1", "255": "fb8ab261ca9ba961241a30b5a85d0afbcf3ab94c", "259": "e340e00d8c0d9dd1ceeb52a4897bfb73d82083a6", "263": "792b0920e9df7c524f6e3e13fba23a6fb3baa664", "268": "494fa6d3f30f7893fccba4ae3c5f506f201f902e", "272": "7b41ebf05c0cf6092b83e7092e6778abc929f2d1", "276": "8e74dab910c2f90d1db8711b18380083809fcafc", "280": "8a35d687e1b96c1add65cf80d56d2d410d9e99eb", "285": "881f33a73701c19dd00017a759955bf7865748a5", "290": "0a6ced33b7583c464ff1a64a02f368e1cace0db2", "294": "a8daf19787a7ff84516f6ac9581ed2cf750c96a2", "298": "84b4c85e98cf4cddf7e942446df35f42e837246f", "302": "cf40040266225be41f0e72f8ab8da6f90e339e8e", "306": "e1274fface01f33f3e0d8ee01bae54d58ca759fc", "310": "17522057544d1cdd3c2825b084ecaab08e7722a5", "314": "df11e93a41235010714c44f008df318ecc915526", "318": "5d1b8c25e5b93c6459a393db031b3b7429e35c65", "323": "450c317e0ae8dc9fbc81f044330b998e7cb9e221", "328": "42efa6ad8e72dd2c3e1156b563c141ace159f99b", "332": "abd111cb2a22a8370a89e89e33cf78d581b59a3c", "336": "7bd8b4ae744add24040c551cd7a766ed96a651d0", "340": "751044e2e00e81a576cb3579d1cb921480068569", "344": "8f61fe460624f55429f86371f1001802d624a806", "348": "54a10198e18319c25f40ae71719de3bf16988b03", "352": "bf60d756b7e65210684fc0fb86d5f156acab1e27", "356": "86e786c61a233f2f3c5d805e132fcc6bad46b289", "360": "9c62ca5eae59ec03a8dbd93167e5b1347bc6cfb9", "364": "03433efb0da15c8827b6a909bc6164a1629b1efb", "368": "23fbf231d1ba4ac54eb5728f2e009f137187938c", "372": "30d938e9a06d3584f855a2c2baf14b77ce234b94", "376": "0ba7fffd61330a576d7bf04132d3f79b76955ef0", "380": "31b10655acf82a6c3a65b4e7e52739a69e2b38d8", "385": "85df5c4938041003b3a7fc02c994f9543be83f83", "389": "64f6efaba13c9fab42d9142cc0d2901c37f122a6", "393": "dd8f996b71685337aee84143c8f3ae68c3d84a88", "397": "1fc922597a5f453afae07b2de81d2d0df30c9102", "401": "afed2d4c858bc132c33c061fb92e9e8550681380", "405": "95431462313b8a61f15d5c97185d7bc56a485139", "409": "cf6d48be53c15d6208a99e5a445ba98235d7fe50", "414": "6e8c20525647d82a3fbc305a6c9ffb8fa3f22071"}, "revision_to_date": {"22": 1718958164000, "26": 1718958494000, "30": 1718958866000, "34": 1718960253000, "39": 1718961592000, "41": 1718961641000, "48": 1718962666000, "51": 1718962796000, "58": 1718964028000, "62": 1718965247000, "66": 1718968561000, "70": 1718973334000, "74": 1718976092000, "83": 1718977525000, "87": 1718979435000, "110": 1718984297000, "115": 1718984952000, "119": 1718985274000, "125": 1718986978000, "130": 1718990031000, "134": 1718990336000, "138": 1718994336000, "142": 1718997326000, "146": 1719001221000, "150": 1719004734000, "154": 1719008288000, "158": 1719011861000, "162": 1719019283000, "166": 1719023479000, "170": 1719026569000, "174": 1719030093000, "178": 1719033545000, "182": 1719037531000, "186": 1719040701000, "191": 1719043770000, "195": 1719058870000, "199": 1719072902000, "203": 1719087098000, "207": 1719104428000, "211": 1719116062000, "216": 1719129331000, "220": 1719199085000, "225": 1719229623000, "230": 1719230234000, "234": 1719232527000, "238": 1719235038000, "242": 1719238472000, "246": 1719242223000, "251": 1719245680000, "255": 1719245921000, "259": 1719249233000, "263": 1719253224000, "268": 1719255667000, "272": 1719277290000, "276": 1719296344000, "280": 1719318374000, "285": 1719330513000, "290": 1719335770000, "294": 1719339533000, "298": 1719363695000, "302": 1719382815000, "306": 1719404850000, "310": 1719425868000, "314": 1719450105000, "318": 1719469154000, "323": 1719476737000, "328": 1719477426000, "332": 1719491187000, "336": 1719512184000, "340": 1719536509000, "344": 1719555545000, "348": 1719577553000, "352": 1719598643000, "356": 1719622842000, "360": 1719641856000, "364": 1719663898000, "368": 1719684994000, "372": 1719709619000, "376": 1719728275000, "380": 1719750287000, "385": 1719764374000, "389": 1719803393000, "393": 1719889764000, "397": 1719976165000, "401": 1720062651000, "405": 1720148974000, "409": 1720235464000, "414": 1720274780000}, "params": {"machine": ["gha-aws-graviton", "gha-aws-skylake", "gha-ubuntu-noble"], "python": ["3.12"], "branch": ["tracker"]}, "graph_param_list": [{"machine": "gha-aws-skylake", "python": "3.12", "branch": "tracker"}, {"machine": "gha-aws-graviton", "python": "3.12", "branch": "tracker"}, {"machine": "gha-ubuntu-noble", "python": "3.12", "branch": "tracker"}], "benchmarks": {"benchmarks.Nrm2.time_nrm2": {"code": "class Nrm2:\n    def time_nrm2(self, n, variant):\n        run_nrm2(n, self.x, 1, self.nrm2)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.x = rndm.uniform(size=(n,)).astype(dtyp)\n        self.nrm2 = ow.get_func('nrm2', variant)", "min_run_count": 2, "name": "benchmarks.Nrm2.time_nrm2", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'d'", "'dz'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "243b9089fb28b3879e81458c34827d0bcfc02ed39e837fe50102a3a5cb98332c", "warmup_time": -1}, "benchmarks.axpy.time_axpy": {"code": "class axpy:\n    def time_axpy(self, n, variant):\n        run_axpy(self.x, self.y, self.axpy)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.axpy = ow.get_func('axpy', variant)", "min_run_count": 2, "name": "benchmarks.axpy.time_axpy", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ea35623f6e6020020e55d1d167120ea3da5cb229fd50a67717c3fd0a49f56181", "warmup_time": -1}, "benchmarks.dot.time_dot": {"code": "class dot:\n    def time_dot(self, n):\n        run_dot(self.x, self.y, self.func)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        dtyp = float\n    \n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.func = ow.get_func('dot', 'd')", "min_run_count": 2, "name": "benchmarks.dot.time_dot", "number": 0, "param_names": ["size"], "params": [["100", "200", "400", "600", "800", "1000"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "31489ecfdd637688ae8fac6bf6bea48e605d3d104fbf4bd17f477427974599d2", "warmup_time": -1}, "benchmarks.gbmv.time_gbmv": {"code": "class gbmv:\n    def time_gbmv(self, n, variant, kl):\n        run_gbmv(self.m, n, kl, kl, self.a, self.x, self.y, self.gbmv)\n\n    def setup(self, n, variant, kl):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.empty(n, dtype=dtyp)\n    \n        self.m = n\n    \n        a = rndm.uniform(size=(2*kl + 1, n))\n        self.a = np.array(a, dtype=dtyp, order='F')\n    \n        self.gbmv = ow.get_func('gbmv', variant)", "min_run_count": 2, "name": "benchmarks.gbmv.time_gbmv", "number": 0, "param_names": ["size", "variant", "kl"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"], ["1", "2", "3"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "294a051064b18ef64ef4ef3cdd3aee1c99e2ab93eeaa44ef95ecea54e399c89b", "warmup_time": -1}, "benchmarks.gemm.time_gemm": {"code": "class gemm:\n    def time_gemm(self, n, variant):\n        run_gemm(self.a, self.b, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.b = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.c = np.empty((n, n), dtype=dtyp, order='F')\n        self.func = ow.get_func('gemm', variant)", "min_run_count": 2, "name": "benchmarks.gemm.time_gemm", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "eb657532f52df20bb51d8aadf0771b04de52fa665f6138f9b704465adc185477", "warmup_time": -1}, "benchmarks.gemv.time_gemv": {"code": "class gemv:\n    def time_gemv(self, n, variant):\n        run_gemv(self.a, self.x, self.y, self.gemv)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = np.array(rndm.uniform(size=(n,n)), dtype=dtyp)\n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.zeros(n, dtype=dtyp)\n    \n        self.gemv = ow.get_func('gemv', variant)", "min_run_count": 2, "name": "benchmarks.gemv.time_gemv", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ffcdac2e33a88dd7abd03d71aee17edca3d775daee01c8a5ebc4b804c76702a7", "warmup_time": -1}, "benchmarks.gesdd.time_gesdd": {"code": "class gesdd:\n    def time_gesdd(self, mn, variant):\n        run_gesdd(self.a, self.lwork, self.func)\n\n    def setup(self, mn, variant):\n        m, n = (int(x) for x in mn.split(\",\"))\n    \n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        a = np.array(rndm.uniform(size=(m, n)), dtype=dtyp, order='F')\n    \n        gesdd_lwork = ow.get_func('gesdd_lwork', variant)\n    \n        lwork, info = gesdd_lwork(m, n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a, self.lwork = a, lwork\n        self.func = ow.get_func('gesdd', variant)", "min_run_count": 2, "name": "benchmarks.gesdd.time_gesdd", "number": 0, "param_names": ["(m, n)", "variant"], "params": [["'100, 5'", "'1000, 222'"], ["'s'", "'d'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4f51eefb48a23ae52447799db20d313d35ed043d3ccc6f4311a4c7df0c93f30d", "warmup_time": -1}, "benchmarks.gesv.time_gesv": {"code": "class gesv:\n    def time_gesv(self, n, variant):\n        run_gesv(self.a, self.b, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = (np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F') +\n                  np.eye(n, dtype=dtyp, order='F'))\n        self.b = np.array(rndm.uniform(size=(n, 1)), dtype=dtyp, order='F')\n        self.func = ow.get_func('gesv', variant)", "min_run_count": 2, "name": "benchmarks.gesv.time_gesv", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "056395e31934bb4c5f3fd4f420db2ee69cb584dd5a954e903d17d80a9d91c773", "warmup_time": -1}, "benchmarks.syev.time_syev": {"code": "class syev:\n    def time_syev(self, n, variant):\n        run_syev(self.a, self.lwork, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        a = rndm.uniform(size=(n, n))\n        a = np.asarray(a + a.T, dtype=dtyp, order='F')\n        a_ = a.copy()\n    \n        syev_lwork = ow.get_func('syev_lwork', variant)\n        lwork, info = syev_lwork(n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a = a_\n        self.lwork = lwork\n        self.func = ow.get_func('syev', variant)", "min_run_count": 2, "name": "benchmarks.syev.time_syev", "number": 0, "param_names": ["size", "variant"], "params": [["50", "64", "128", "200"], ["'s'", "'d'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6a6a9e92a1a1515075bcc66ab4604c5bbdd1053f83badd67ce30f4d9705edbc6", "warmup_time": -1}, "benchmarks.syrk.time_syrk": {"code": "class syrk:\n    def time_syrk(self, n, variant):\n        run_syrk(self.a, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.c = np.empty((n, n), dtype=dtyp, order='F')\n        self.func = ow.get_func('syrk', variant)", "min_run_count": 2, "name": "benchmarks.syrk.time_syrk", "number": 0, "param_names": ["size", "variant"], "params": [["100", "200", "400", "600", "800", "1000"], ["'s'", "'d'", "'c'", "'z'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c41c46159452b98d6888b3d7c93d56f802365f947186dd6593345ace043c916d", "warmup_time": -1}}, "machines": {"gha-aws-skylake": {"machine": "gha-aws-skylake", "version": 1}, "gha-aws-graviton": {"machine": "gha-aws-graviton", "version": 1}, "gha-ubuntu-noble": {"machine": "gha-ubuntu-noble", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}