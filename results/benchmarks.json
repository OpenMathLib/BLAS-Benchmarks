{
    "benchmarks.DDot.time_ddot": {
        "code": "class DDot:\n    def time_ddot(self, n):\n        run_ddot(self.x, self.y, self.func)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        self.x = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.func = ow.get_func('dot', 'd')",
        "min_run_count": 2,
        "name": "benchmarks.DDot.time_ddot",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "100",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "238a2730d26c24fe16745c65ae2194b72dee2d6ea4bbbf72a4a343cf80dd608e",
        "warmup_time": -1
    },
    "benchmarks.DSyrk.time_dsyrk": {
        "code": "class DSyrk:\n    def time_dsyrk(self, n, variant):\n        run_dsyrk(self.a, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.c = np.empty((n, n), dtype=float, order='F')\n        self.func = ow.get_func('syrk', variant)",
        "min_run_count": 2,
        "name": "benchmarks.DSyrk.time_dsyrk",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5a0ceb326af714835d0440313888909a1edf921de8142e562bc58f8bf65fce06",
        "warmup_time": -1
    },
    "benchmarks.Daxpy.time_daxpy": {
        "code": "class Daxpy:\n    def time_daxpy(self, n, variant):\n        run_daxpy(self.x, self.y, self.axpy)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.x = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=float)\n        self.axpy = ow.get_func('axpy', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Daxpy.time_daxpy",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "6c777a64382fa8a876070ad566bfc06dc11f4d33cc0d41820c22d3ed976e3467",
        "warmup_time": -1
    },
    "benchmarks.Dgemm.time_dgemm": {
        "code": "class Dgemm:\n    def time_dgemm(self, n, variant):\n        run_dgemm(self.a, self.b, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.b = np.array(rndm.uniform(size=(n, n)), dtype=float, order='F')\n        self.c = np.empty((n, n), dtype=float, order='F')\n        self.func = ow.get_func('gemm', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Dgemm.time_dgemm",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3360ecc154a6f4a6f1f6e48fe4e9b317792e70952a5cc32c44176910ab1c6cd1",
        "warmup_time": -1
    },
    "benchmarks.Dgesdd.time_dgesdd": {
        "code": "class Dgesdd:\n    def time_dgesdd(self, mn, variant):\n        run_dgesdd(self.a, self.lwork, self.func)\n\n    def setup(self, mn, variant):\n        m, n = (int(x) for x in mn.split(\",\"))\n    \n        rndm = np.random.RandomState(1234)\n        a = np.array(rndm.uniform(size=(m, n)), dtype=float, order='F')\n    \n        gesdd_lwork = ow.get_func('gesdd_lwork', variant)\n    \n        lwork, info = gesdd_lwork(m, n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a, self.lwork = a, lwork\n        self.func = ow.get_func('gesdd', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Dgesdd.time_dgesdd",
        "number": 0,
        "param_names": [
            "(m, n)",
            "variant"
        ],
        "params": [
            [
                "'100, 5'",
                "'1000, 222'"
            ],
            [
                "'s'",
                "'d'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a64075dc5110b73e8a4363dde2e44b1ebbdaa76087b60b23dc0f46c48e6dfe64",
        "warmup_time": -1
    },
    "benchmarks.Dgesv.time_dgesv": {
        "code": "class Dgesv:\n    def time_dgesv(self, n, variant):\n        run_dgesv(self.a, self.b, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.a = (np.array(rndm.uniform(size=(n, n)), dtype=float, order='F') +\n                  np.eye(n, order='F'))\n        self.b = np.array(rndm.uniform(size=(n, 1)), order='F')\n        self.func = ow.get_func('gesv', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Dgesv.time_dgesv",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d68b52b68a893b0ebd7fa6246c452f2cf9171a48ff1efd947070e4d5cb9c11c5",
        "warmup_time": -1
    },
    "benchmarks.Dsyev.time_dsyev": {
        "code": "class Dsyev:\n    def time_dsyev(self, n, variant):\n        run_dsyev(self.a, self.lwork, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        a = rndm.uniform(size=(n, n))\n        a = np.asarray(a + a.T, dtype=float, order='F')\n        a_ = a.copy()\n    \n        syev_lwork = ow.get_func('syev_lwork', variant)\n        lwork, info = syev_lwork(n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a = a_\n        self.lwork = lwork\n        self.func = ow.get_func('syev', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Dsyev.time_dsyev",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "50",
                "200"
            ],
            [
                "'s'",
                "'d'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "8c4ffc3f68dee9e7affe73391be0affe83497b672d9fae2d436a7a0fd6136b41",
        "warmup_time": -1
    },
    "benchmarks.Nrm2.time_dnrm2": {
        "code": "class Nrm2:\n    def time_dnrm2(self, n, variant):\n        run_dnrm2(n, self.x, 1, self.nrm2)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        self.x = rndm.uniform(size=(n,)).astype(float)\n        self.nrm2 = ow.get_func('nrm2', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Nrm2.time_dnrm2",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "1000"
            ],
            [
                "'d'",
                "'dz'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4f65590a47f5117049951e49a2983706b5a5611a600ad8c99a8777810438430e",
        "warmup_time": -1
    },
    "version": 2
}