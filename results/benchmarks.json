{
    "benchmarks.DDot.time_ddot": {
        "code": "class DDot:\n    def time_ddot(self, n):\n        run_ddot(self.x, self.y, self.func)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        dtyp = float\n    \n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.func = ow.get_func('dot', 'd')",
        "min_run_count": 2,
        "name": "benchmarks.DDot.time_ddot",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d21f0b70c8bb1fb3ccc3728ea58a39e31a84bfc8d3adc67718758fdd2f0a792b",
        "warmup_time": -1
    },
    "benchmarks.DSyrk.time_dsyrk": {
        "code": "class DSyrk:\n    def time_dsyrk(self, n, variant):\n        run_dsyrk(self.a, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.c = np.empty((n, n), dtype=dtyp, order='F')\n        self.func = ow.get_func('syrk', variant)",
        "min_run_count": 2,
        "name": "benchmarks.DSyrk.time_dsyrk",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "738d6efd8bd0547aedcce3bde6d09dcddc325b7eedc41fbc0da5dffc3f9b3d68",
        "warmup_time": -1
    },
    "benchmarks.Daxpy.time_daxpy": {
        "code": "class Daxpy:\n    def time_daxpy(self, n, variant):\n        run_daxpy(self.x, self.y, self.axpy)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.axpy = ow.get_func('axpy', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Daxpy.time_daxpy",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "47e96f37704800def6431ebe63fd3678e476b6727060b319c381fe0b0c5c62c4",
        "warmup_time": -1
    },
    "benchmarks.Dgemm.time_dgemm": {
        "code": "class Dgemm:\n    def time_dgemm(self, n, variant):\n        run_dgemm(self.a, self.b, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.b = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.c = np.empty((n, n), dtype=dtyp, order='F')\n        self.func = ow.get_func('gemm', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Dgemm.time_dgemm",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5425d558420ebeb4479b252a425e153e40d0d23fd99c7ee97341e9e77368a4f5",
        "warmup_time": -1
    },
    "benchmarks.Dgesdd.time_dgesdd": {
        "code": "class Dgesdd:\n    def time_dgesdd(self, mn, variant):\n        run_dgesdd(self.a, self.lwork, self.func)\n\n    def setup(self, mn, variant):\n        m, n = (int(x) for x in mn.split(\",\"))\n    \n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        a = np.array(rndm.uniform(size=(m, n)), dtype=dtyp, order='F')\n    \n        gesdd_lwork = ow.get_func('gesdd_lwork', variant)\n    \n        lwork, info = gesdd_lwork(m, n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a, self.lwork = a, lwork\n        self.func = ow.get_func('gesdd', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Dgesdd.time_dgesdd",
        "number": 0,
        "param_names": [
            "(m, n)",
            "variant"
        ],
        "params": [
            [
                "'100, 5'",
                "'1000, 222'"
            ],
            [
                "'s'",
                "'d'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "88b0d92e489bffe8e8a467831dc1c8e9b1a30fbcd3fd6fd2f53aebdf266e4792",
        "warmup_time": -1
    },
    "benchmarks.Dgesv.time_dgesv": {
        "code": "class Dgesv:\n    def time_dgesv(self, n, variant):\n        run_dgesv(self.a, self.b, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = (np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F') +\n                  np.eye(n, dtype=dtyp, order='F'))\n        self.b = np.array(rndm.uniform(size=(n, 1)), dtype=dtyp, order='F')\n        self.func = ow.get_func('gesv', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Dgesv.time_dgesv",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e79a6fef1927b00eed9d5be976243ea5ec5ec0b27590f3dfa20eb670802f393e",
        "warmup_time": -1
    },
    "benchmarks.Dsyev.time_dsyev": {
        "code": "class Dsyev:\n    def time_dsyev(self, n, variant):\n        run_dsyev(self.a, self.lwork, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        a = rndm.uniform(size=(n, n))\n        a = np.asarray(a + a.T, dtype=dtyp, order='F')\n        a_ = a.copy()\n    \n        syev_lwork = ow.get_func('syev_lwork', variant)\n        lwork, info = syev_lwork(n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a = a_\n        self.lwork = lwork\n        self.func = ow.get_func('syev', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Dsyev.time_dsyev",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "50",
                "64",
                "128",
                "200"
            ],
            [
                "'s'",
                "'d'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "8e4ea15539e5bb6f19407ff8cc9eb20bc88c04de044cf55237d52fb21bc0c858",
        "warmup_time": -1
    },
    "benchmarks.Nrm2.time_dnrm2": {
        "code": "class Nrm2:\n    def time_dnrm2(self, n, variant):\n        run_dnrm2(n, self.x, 1, self.nrm2)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.x = rndm.uniform(size=(n,)).astype(dtyp)\n        self.nrm2 = ow.get_func('nrm2', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Nrm2.time_dnrm2",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'d'",
                "'dz'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5f1810e400ee7e8ff418ef8e4312147a94abfb8f455a20eb0af096da3e1f81dd",
        "warmup_time": -1
    },
    "version": 2
}