{
    "benchmarks.Nrm2.time_nrm2": {
        "code": "class Nrm2:\n    def time_nrm2(self, n, variant):\n        run_nrm2(n, self.x, 1, self.nrm2)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.x = rndm.uniform(size=(n,)).astype(dtyp)\n        self.nrm2 = ow.get_func('nrm2', variant)",
        "min_run_count": 2,
        "name": "benchmarks.Nrm2.time_nrm2",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'d'",
                "'dz'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "243b9089fb28b3879e81458c34827d0bcfc02ed39e837fe50102a3a5cb98332c",
        "warmup_time": -1
    },
    "benchmarks.axpy.time_axpy": {
        "code": "class axpy:\n    def time_axpy(self, n, variant):\n        run_axpy(self.x, self.y, self.axpy)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.axpy = ow.get_func('axpy', variant)",
        "min_run_count": 2,
        "name": "benchmarks.axpy.time_axpy",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ea35623f6e6020020e55d1d167120ea3da5cb229fd50a67717c3fd0a49f56181",
        "warmup_time": -1
    },
    "benchmarks.dot.time_dot": {
        "code": "class dot:\n    def time_dot(self, n):\n        run_dot(self.x, self.y, self.func)\n\n    def setup(self, n):\n        rndm = np.random.RandomState(1234)\n        dtyp = float\n    \n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.func = ow.get_func('dot', 'd')",
        "min_run_count": 2,
        "name": "benchmarks.dot.time_dot",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "31489ecfdd637688ae8fac6bf6bea48e605d3d104fbf4bd17f477427974599d2",
        "warmup_time": -1
    },
    "benchmarks.gbmv.time_gbmv": {
        "code": "class gbmv:\n    def time_gbmv(self, n, variant, kl):\n        run_gbmv(self.m, n, kl, kl, self.a, self.x, self.y, self.gbmv)\n\n    def setup(self, n, variant, kl):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.empty(n, dtype=dtyp)\n    \n        self.m = n\n    \n        a = rndm.uniform(size=(2*kl + 1, n))\n        self.a = np.array(a, dtype=dtyp, order='F')\n    \n        self.gbmv = ow.get_func('gbmv', variant)",
        "min_run_count": 2,
        "name": "benchmarks.gbmv.time_gbmv",
        "number": 0,
        "param_names": [
            "size",
            "variant",
            "kl"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ],
            [
                "1"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "294a051064b18ef64ef4ef3cdd3aee1c99e2ab93eeaa44ef95ecea54e399c89b",
        "warmup_time": -1
    },
    "benchmarks.gemm.time_gemm": {
        "code": "class gemm:\n    def time_gemm(self, n, variant):\n        run_gemm(self.a, self.b, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.b = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.c = np.empty((n, n), dtype=dtyp, order='F')\n        self.func = ow.get_func('gemm', variant)",
        "min_run_count": 2,
        "name": "benchmarks.gemm.time_gemm",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "eb657532f52df20bb51d8aadf0771b04de52fa665f6138f9b704465adc185477",
        "warmup_time": -1
    },
    "benchmarks.gemv.time_gemv": {
        "code": "class gemv:\n    def time_gemv(self, n, variant):\n        run_gemv(self.a, self.x, self.y, self.gemv)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = np.array(rndm.uniform(size=(n,n)), dtype=dtyp)\n        self.x = np.array(rndm.uniform(size=(n,)), dtype=dtyp)\n        self.y = np.zeros(n, dtype=dtyp)\n    \n        self.gemv = ow.get_func('gemv', variant)",
        "min_run_count": 2,
        "name": "benchmarks.gemv.time_gemv",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ffcdac2e33a88dd7abd03d71aee17edca3d775daee01c8a5ebc4b804c76702a7",
        "warmup_time": -1
    },
    "benchmarks.gesdd.time_gesdd": {
        "code": "class gesdd:\n    def time_gesdd(self, mn, variant):\n        run_gesdd(self.a, self.lwork, self.func)\n\n    def setup(self, mn, variant):\n        m, n = (int(x) for x in mn.split(\",\"))\n    \n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        a = np.array(rndm.uniform(size=(m, n)), dtype=dtyp, order='F')\n    \n        gesdd_lwork = ow.get_func('gesdd_lwork', variant)\n    \n        lwork, info = gesdd_lwork(m, n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a, self.lwork = a, lwork\n        self.func = ow.get_func('gesdd', variant)",
        "min_run_count": 2,
        "name": "benchmarks.gesdd.time_gesdd",
        "number": 0,
        "param_names": [
            "(m, n)",
            "variant"
        ],
        "params": [
            [
                "'100, 5'",
                "'1000, 222'"
            ],
            [
                "'s'",
                "'d'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4f51eefb48a23ae52447799db20d313d35ed043d3ccc6f4311a4c7df0c93f30d",
        "warmup_time": -1
    },
    "benchmarks.gesv.time_gesv": {
        "code": "class gesv:\n    def time_gesv(self, n, variant):\n        run_gesv(self.a, self.b, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = (np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F') +\n                  np.eye(n, dtype=dtyp, order='F'))\n        self.b = np.array(rndm.uniform(size=(n, 1)), dtype=dtyp, order='F')\n        self.func = ow.get_func('gesv', variant)",
        "min_run_count": 2,
        "name": "benchmarks.gesv.time_gesv",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "056395e31934bb4c5f3fd4f420db2ee69cb584dd5a954e903d17d80a9d91c773",
        "warmup_time": -1
    },
    "benchmarks.syev.time_syev": {
        "code": "class syev:\n    def time_syev(self, n, variant):\n        run_syev(self.a, self.lwork, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        a = rndm.uniform(size=(n, n))\n        a = np.asarray(a + a.T, dtype=dtyp, order='F')\n        a_ = a.copy()\n    \n        syev_lwork = ow.get_func('syev_lwork', variant)\n        lwork, info = syev_lwork(n)\n        lwork = int(lwork)\n        assert info == 0\n    \n        self.a = a_\n        self.lwork = lwork\n        self.func = ow.get_func('syev', variant)",
        "min_run_count": 2,
        "name": "benchmarks.syev.time_syev",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "50",
                "64",
                "128",
                "200"
            ],
            [
                "'s'",
                "'d'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "6a6a9e92a1a1515075bcc66ab4604c5bbdd1053f83badd67ce30f4d9705edbc6",
        "warmup_time": -1
    },
    "benchmarks.syrk.time_syrk": {
        "code": "class syrk:\n    def time_syrk(self, n, variant):\n        run_syrk(self.a, self.c, self.func)\n\n    def setup(self, n, variant):\n        rndm = np.random.RandomState(1234)\n        dtyp = dtype_map[variant]\n    \n        self.a = np.array(rndm.uniform(size=(n, n)), dtype=dtyp, order='F')\n        self.c = np.empty((n, n), dtype=dtyp, order='F')\n        self.func = ow.get_func('syrk', variant)",
        "min_run_count": 2,
        "name": "benchmarks.syrk.time_syrk",
        "number": 0,
        "param_names": [
            "size",
            "variant"
        ],
        "params": [
            [
                "100",
                "200",
                "400",
                "600",
                "800",
                "1000"
            ],
            [
                "'s'",
                "'d'",
                "'c'",
                "'z'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "c41c46159452b98d6888b3d7c93d56f802365f947186dd6593345ace043c916d",
        "warmup_time": -1
    },
    "version": 2
}